name: CI

on:
  push:
    branches:
      - 'master'
    tags:
      - '*'
    paths-ignore:
      - '**/README.md'
  pull_request:
    paths-ignore:
      - '**/README.md'

jobs:
  ansible-lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          
      - name: Setup ansible venv
        working-directory: deploy
        run: |
          make venv

      - name: Install ansible-lint
        working-directory: deploy
        run: |
          ./venv/bin/pip install wheel
          ./venv/bin/pip install ansible-lint==6.3.0

      # ignore 'meta-no-info', since we don't need to publish our roles to Ansible Galaxy
      - name: Run ansible-lint
        working-directory: deploy
        run: |
          ./venv/bin/ansible-lint -x 'meta-no-info'

  check-mode:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Run deployment in check mode (dry-run)
        run: make deploy -- --check

  local:
    strategy:
        matrix:
            os: [ubuntu-18.04, ubuntu-20.04, ubuntu-22.04]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # shallow clone for CI speed
      - name: Setup ansible extra vars in JSON file
        run: |
          echo '{"git_clone_depth": 1}' >> parameters.json
        working-directory: deploy

      # skip tags related to non-existent hardware/configuration in the CI runner environment
      - name: Test userspace deployment
        run: > 
          make deploy --
          --skip-tags "hardware_check,kvm_device"
          --extra-vars "@parameters.json"

  remote:
    runs-on: ubuntu-20.04

    services:
      ssh:
        image: wenzel/sshd:ubuntu22.04
        ports:
          # open SSH
          - 5000:22
        env:
          ROOT_PASSWORD: toor

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # shallow clone for CI speed
      - name: Setup ansible extra vars in JSON file
        run: |
          echo '{"git_clone_depth": 1}' >> parameters.json
        working-directory: deploy

      - name: Setup ansible
        run: |
          make venv
        working-directory: deploy

      # the service container runs is accessible on 127.0.0.1:5000
      - name: Setup inventory
        run: |
          venv/bin/python - << '__HERE__'
          import yaml

          with open("host_vars/localhost.yml", "w") as f:
            data = {
              "ansible_port": 5000,
              "ansible_user": "root",
              "ansible_ssh_pass": "toor",
              "ansible_ssh_common_args": "-o StrictHostKeyChecking=no"
            }
            yaml.dump(data, f)
          __HERE__
        working-directory: deploy

      - name: Install Python3 on service container
        run: |
          venv/bin/ansible all -i inventory -m raw -a "apt update"
          venv/bin/ansible all -i inventory -m raw -a "apt install -y python3"
        working-directory: deploy

      - name: Upgrade packages
        run: venv/bin/ansible all -i inventory -m ansible.builtin.apt -a "upgrade=dist"
        working-directory: deploy

      # skip tags related to non-existent hardware/configuration in the CI runner environment
      - name: Test userspace deployment
        run: >
          make deploy --
          --skip-tags "hardware_check,kvm_device,update_grub,reboot_kernel"
          --extra-vars "@parameters.json"

  nyx-testing:
    runs-on: self-hosted

    steps:
        # ensure workspace is cleaned up
        # (doesn't happen automatically on self-hosted runnner for some reason)
      - name: cleanup workdir
        run: find . -mindepth 1 -delete

      - uses: actions/checkout@v2
        with:
          repository: nyx-fuzz/Nyx-Testing

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Prepare tests
        run: |
          sh setup.sh
          sh prepare_tests.sh

      - name: Run tests
        run: cargo test -- --skip processor_trace

      - name: Run PT tests
        run: cargo test

  build_image:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.1.1
        with:
          images: intellabs/kafl

      - name: Build image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  release:
    # this job makes an official Github release
    needs: [ansible-lint, check-mode, local, remote, nyx-testing]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      upload_url: ${{ steps.step_upload_url.outputs.upload_url }}

    steps:
      - uses: actions/checkout@v2

      - name: Get the version
        id: get_version
        run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}

      # only create release if tag start by 'v*'
      - name: Create a Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          body_path: ${{ github.workspace }}/.github/RELEASE.md
        if: startsWith(github.ref, 'refs/tags/v')

      - id: step_upload_url
        run: echo "::set-output name=upload_url::${{ steps.create_release.outputs.upload_url }}"
