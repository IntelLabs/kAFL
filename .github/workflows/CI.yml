name: CI

on:
  push:
    branches:
      - 'master'
    tags:
      - '*'
    paths-ignore:
      - '**/README.md'
  pull_request:
    paths-ignore:
      - '**/README.md'

jobs:
  ansible-lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          
      - name: Setup ansible venv
        working-directory: deploy
        run: |
          make venv

      - name: Install ansible-lint
        working-directory: deploy
        run: |
          ./venv/bin/pip install ansible-lint

      - name: Run ansible-lint
        working-directory: deploy
        run: |
          ./venv/bin/ansible-lint
      
  local:
    strategy:
        matrix:
            os: [ubuntu-18.04, ubuntu-20.04]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # shallow clone for CI speed
      - name: Setup ansible extra vars in JSON file
        run: |
          echo '{"git_clone_depth": 1}' >> parameters.json
        working-directory: deploy

      # skip tags related to non-existent hardware/configuration in the CI runner environment
      - name: Test userspace deployment
        run: > 
          make deploy --
          --skip-tags "hardware_check,kvm_device"
          --extra-vars "@parameters.json"

  remote:
    runs-on: ubuntu-20.04

    services:
      ssh:
        image: eilandert/openssh:debian
        ports:
          # open SSH
          - 5000:22

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      # shallow clone for CI speed
      - name: Setup ansible extra vars in JSON file
        run: |
          echo '{"git_clone_depth": 1}' >> parameters.json
        working-directory: deploy

      # the service container runs is accessible on 127.0.0.1:5000
      - name: Setup inventory
        run: >
          echo 'localhost
          ansible_port=5000
          ansible_user=root
          ansible_ssh_pass=toor
          ansible_ssh_common_args="-o StrictHostKeyChecking=no"'
          > inventory
        working-directory: deploy

      - name: Setup ansible
        run: |
          make venv
        working-directory: deploy

      - name: Install Python3 on service container
        run: |
          venv/bin/ansible all -i inventory -m raw -a "apt update"
          venv/bin/ansible all -i inventory -m raw -a "apt install -y python3"
        working-directory: deploy

      # skip tags related to non-existent hardware/configuration in the CI runner environment
      - name: Test userspace deployment
        run: >
          make deploy --
          --skip-tags "hardware_check,kvm_device,update_grub,reboot_kernel"
          --extra-vars "@parameters.json"

  release:
    # this job makes an official Github release
    needs: [local, remote]
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      upload_url: ${{ steps.step_upload_url.outputs.upload_url }}

    steps:
      - uses: actions/checkout@v2

      - name: Get the version
        id: get_version
        run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}

      # only create release if tag start by 'v*'
      - name: Create a Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          body_path: ${{ github.workspace }}/.github/RELEASE.txt
        if: startsWith(github.ref, 'refs/tags/v')

      - id: step_upload_url
        run: echo "::set-output name=upload_url::${{ steps.create_release.outputs.upload_url }}"
